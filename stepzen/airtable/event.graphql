type Event {
    id: String!
    name: String
    date: String
    address: String
	city: String
	state: String
    location: String
    description: String
    heroPhotoURL: String
    slug: String!
	heroImg: [HeroImg]
		@materializer (query: "eventHeroImg")
}

type HeroImg {
	url: String
}

type Query {
    airtableEvent(eventSlug: String!): Event
        @rest(
            setters: [
                { field: "name", path: "fields.Name" }
                { field: "date", path: "fields.Date" }
                { field: "address", path: "fields.Address" }
                { field: "city", path: "fields.City" }
                { field: "state", path: "fields.State" }
                { field: "slug", path: "fields.slug" }
                { field: "description", path: "fields.Description" }
            ]

            resultroot: "records[]"
            endpoint: "https://api.airtable.com/v0/$baseid/events/?filterByFormula={slug}=%27$eventSlug%27"
            configuration: "airtable_config"
        )
    airtablesEvents: [Event]
        @rest(
            resultroot: "records[]"
            setters: [
                { field: "name", path: "fields.Name" }
                { field: "date", path: "fields.Date" }
                { field: "address", path: "fields.Address" }
                { field: "city", path: "fields.City" }
                { field: "state", path: "fields.State" }
                { field: "slug", path: "fields.slug" }
                { field: "description", path: "fields.Description" }
            ]

            endpoint: "https://api.airtable.com/v0/$baseid/events?filterByFormula=NOT%28%7BName%7D%20%3D%20%27%27%29"
            configuration: "airtable_config"
        )
    eventHeroImg(id: ID!): [HeroImg]
        @rest(
            resultroot: "fields.Hero_Photo[]"
            endpoint: "https://api.airtable.com/v0/$baseid/events/$id"
            configuration: "airtable_config"
        )
}
